package snap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/intelsdi-x/snap-client-go/models"
)

// SwapPluginsReader is a Reader for the SwapPlugins structure.
type SwapPluginsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SwapPluginsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewSwapPluginsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSwapPluginsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewSwapPluginsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewSwapPluginsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSwapPluginsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSwapPluginsCreated creates a SwapPluginsCreated with default headers values
func NewSwapPluginsCreated() *SwapPluginsCreated {
	return &SwapPluginsCreated{}
}

/*SwapPluginsCreated handles this case with default header values.

PluginResponse represents the response from plugin operations.
*/
type SwapPluginsCreated struct {
	Payload *models.Plugin
}

func (o *SwapPluginsCreated) Error() string {
	return fmt.Sprintf("[POST /plugins/{ptype}/{pname}/{pversion}/swap][%d] swapPluginsCreated  %+v", 201, o.Payload)
}

func (o *SwapPluginsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Plugin)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwapPluginsBadRequest creates a SwapPluginsBadRequest with default headers values
func NewSwapPluginsBadRequest() *SwapPluginsBadRequest {
	return &SwapPluginsBadRequest{}
}

/*SwapPluginsBadRequest handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type SwapPluginsBadRequest struct {
	Payload *models.Error
}

func (o *SwapPluginsBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugins/{ptype}/{pname}/{pversion}/swap][%d] swapPluginsBadRequest  %+v", 400, o.Payload)
}

func (o *SwapPluginsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwapPluginsConflict creates a SwapPluginsConflict with default headers values
func NewSwapPluginsConflict() *SwapPluginsConflict {
	return &SwapPluginsConflict{}
}

/*SwapPluginsConflict handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type SwapPluginsConflict struct {
	Payload *models.Error
}

func (o *SwapPluginsConflict) Error() string {
	return fmt.Sprintf("[POST /plugins/{ptype}/{pname}/{pversion}/swap][%d] swapPluginsConflict  %+v", 409, o.Payload)
}

func (o *SwapPluginsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwapPluginsUnsupportedMediaType creates a SwapPluginsUnsupportedMediaType with default headers values
func NewSwapPluginsUnsupportedMediaType() *SwapPluginsUnsupportedMediaType {
	return &SwapPluginsUnsupportedMediaType{}
}

/*SwapPluginsUnsupportedMediaType handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type SwapPluginsUnsupportedMediaType struct {
	Payload *models.Error
}

func (o *SwapPluginsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /plugins/{ptype}/{pname}/{pversion}/swap][%d] swapPluginsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SwapPluginsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSwapPluginsInternalServerError creates a SwapPluginsInternalServerError with default headers values
func NewSwapPluginsInternalServerError() *SwapPluginsInternalServerError {
	return &SwapPluginsInternalServerError{}
}

/*SwapPluginsInternalServerError handles this case with default header values.

Error unsuccessful generic response to a failed API call
*/
type SwapPluginsInternalServerError struct {
	Payload *models.Error
}

func (o *SwapPluginsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugins/{ptype}/{pname}/{pversion}/swap][%d] swapPluginsInternalServerError  %+v", 500, o.Payload)
}

func (o *SwapPluginsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
